{"version":3,"sources":["constants/contract-address.js","contracts/nft-factory.js","components/deploy-contract/index.js","contracts/nft-contract.js","components/create-token/index.js","components/get-commission/index.js","components/reduce-commission/index.js","components/claim-lost-token/index.js","components/list-for-sale/index.js","components/remove-from-sale/index.js","contracts/erc20.js","components/buy/index.js","components/offer-pay-commission/index.js","components/tokens-by-author/index.js","pages/home/index.js","App.js","reportWebVitals.js","index.js"],"names":["NFT_CONTRACT_ADDRESS","NFT_FACTORY_ADDRESS","produce","address","signer","name","symbol","communitySettings","a","contract","ethers","Contract","abi","res","console","log","DeployNFTContract","useState","setName","setSymbol","deployStatus","setDeployStatus","contractAddress","setContractAddress","deployContract","event","preventDefault","provider","providers","Web3Provider","window","ethereum","getSigner","factory","factoryAbi","on","from","to","e","style","textAlign","onSubmit","type","value","onChange","evt","target","paddingTop","create","uri","commissionParams","buyWithCoins","tokenId","overrides","utils","parseEther","buy","buyWithTokens","price","getCommission","saleInfo","reduceCommission","percent","claimLostToken","erc20Address","listForSale","amount","consumeToken","removeFromSale","offerToPayCommission","tokensByAuthor","author","CreateNFT","setUri","token","setToken","setAmount","multiply","setMultiply","accrue","setAccrue","intervalSeconds","setIntervalSeconds","setReduceCommission","tokenCreated","setTokenCreated","setAuthor","setTokenId","createToken","formatUnits","paddingLeft","borderLeft","GetCommission","setAddress","status","setStatus","getData","ReduceCommission","reduceCommissionPercent","setReduceCommissionPercent","submitData","ClaimLostToken","ListForSale","setConsumeToken","RemoveFromSale","approveToken","coinAddress","erc20","approve","hash","Buy","buyWithCoin","buyWithToken","info","onClick","OfferToPayCommission","TokensByAuthor","tokens","setTokens","forEach","element","Home","wallet","useWallet","padding","connect","display","marginTop","flex","App","className","chainId","connectors","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d01bdb42.chunk.js","sourcesContent":["export let NFT_CONTRACT_ADDRESS = {\r\n    1: \"0x0266245cb46dfa135295ace09daff5d51d2a1206\",\r\n    4: \"0x0a0c94682a6995053da7bD29b589A598290B77f9\"\r\n};\r\n\r\nexport const NFT_FACTORY_ADDRESS = {\r\n    1: \"\",\r\n    4: \"0xF5576828976A3C3803b53EC5C71052ABF3d144BA\"\r\n};","import { ethers } from 'ethers';\r\nimport abi from './nft-factory.abi.json';\r\n\r\nexport async function produce(address, signer, name, symbol, communitySettings) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.produce(name, symbol, communitySettings);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport abi from '../../contracts/nft-contract.abi.json';\r\nimport factoryAbi from '../../contracts/nft-factory.abi.json';\r\nimport { NFT_FACTORY_ADDRESS, NFT_CONTRACT_ADDRESS } from '../../constants/contract-address';\r\nimport { produce } from '../../contracts/nft-factory';\r\n\r\nconst DeployNFTContract = () => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [symbol, setSymbol] = useState('');\r\n    const [deployStatus, setDeployStatus] = useState(false);\r\n    const [contractAddress, setContractAddress] = useState('');\r\n  \r\n    const deployContract = async (event) => {\r\n        event.preventDefault();\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const factory = new ethers.Contract(NFT_FACTORY_ADDRESS[4], factoryAbi, signer);\r\n        await produce(NFT_FACTORY_ADDRESS[4], signer, name, symbol, ['0x0000000000000000000000000000000000000000', 'owners']);\r\n\r\n        factory.on(\"Produced\", async (from, to) => {\r\n            console.log('contract address', to);\r\n            try {\r\n                /*\r\n                const nft = new ethers.Contract(to, abi, signer);\r\n                await nft.initialize(name, symbol, ['0x6A482d254bb515674bC3d4Ef37D61353529ad1f4', 'owners']);\r\n                */\r\n                setDeployStatus(true);\r\n                setContractAddress(to);\r\n                NFT_CONTRACT_ADDRESS[4] = to;\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ textAlign: 'left'}}>\r\n            <h3>Deploy NFT Contract</h3>\r\n            <form onSubmit={deployContract}>\r\n                <div>\r\n                    <p>Name</p>\r\n                    <input type=\"text\" value={name} onChange={(evt) => setName(evt.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <p>Symbol</p>\r\n                    <input type=\"text\" value={symbol} onChange={(evt) => setSymbol(evt.target.value)} />\r\n                </div>\r\n                <div style={{ paddingTop: '16px' }}>\r\n                    <input type=\"submit\" value=\"Deploy Contract\" />\r\n                </div>\r\n            </form>\r\n            {\r\n                deployStatus && \r\n                <p>\r\n                    Contract is deployed successfully. Address is {contractAddress}\r\n                </p>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeployNFTContract;\r\n","import { ethers, utils } from 'ethers';\r\nimport abi from './nft-contract.abi.json';\r\n\r\nexport async function create(address, signer, uri, commissionParams) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        console.log({ uri, commissionParams });\r\n        const res = await contract.create(uri, commissionParams);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};  \r\n    }\r\n}\r\n\r\nexport async function buyWithCoins(address, signer, tokenId) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        \r\n        const overrides = {\r\n            value: utils.parseEther('0.1'),\r\n        }\r\n        const res = await contract.buy(tokenId, overrides);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function buyWithTokens(address, signer, tokenId, price) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.buy(tokenId);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function getCommission(address, signer, tokenId) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.getCommission(tokenId);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function saleInfo(address, signer, tokenId) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.saleInfo(tokenId);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function reduceCommission(address, signer, tokenId, percent) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.reduceCommission(tokenId, percent);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function claimLostToken(address, signer, erc20Address) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.claimLostToken(erc20Address);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function listForSale(address, signer, tokenId, amount, consumeToken) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.listForSale(tokenId, utils.parseEther(amount), consumeToken);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function removeFromSale(address, signer, tokenId) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.removeFromSale(tokenId);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function offerToPayCommission(address, signer, tokenId, amount) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.offerToPayCommission(tokenId, amount);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function tokensByAuthor(address, signer, author) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.tokensByAuthor(author);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getOwner(address, signer) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.owner();\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function getName(address, signer) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.name();\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function getTokenAuthor(address, signer, tokenId) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.authorOf(tokenId);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function getOwnerBalance(address, signer, ownerAddress) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.balanceOf(ownerAddress);\r\n        return res.toString();\r\n    } catch (e) {\r\n        console.log(e);\r\n        return \"0\";\r\n    }\r\n}\r\n\r\nexport async function getApproved(address, signer, tokenId) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.getApproved(tokenId);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function isApprovedForAll(address, signer, ownerAddress, operatorAddress) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.isApprovedForAll(ownerAddress, operatorAddress);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function getTokenOwner(address, signer, tokenId) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.ownerOf(tokenId);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return \"\";\r\n    }\r\n}\r\n\r\nexport async function supportsInterface(address, signer, interfaceId) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.supportsInterface(interfaceId);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function getSymbol(address, signer) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.symbol();\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return \"\";\r\n    }\r\n}\r\n\r\nexport async function getTokenByIndex(address, signer, index) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.tokenByIndex(index);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function getTokenOfOwnerByIndex(address, signer, owner, index) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.tokenOfOwnerByIndex(owner, index);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function getTokenUri(address, signer, tokenId) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.tokenURI(tokenId);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function getTokensByAuthor(address, signer, author) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.tokensByAuthor(author);\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getTotalSupply(address, signer) {\r\n    try {\r\n        const contract = new ethers.Contract(address, abi, signer);\r\n        const res = await contract.getTotalSupply();\r\n        return res;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return [];\r\n    }\r\n}\r\n\r\n","import { useState } from 'react';\r\nimport { ethers, utils } from 'ethers';\r\nimport abi from '../../contracts/nft-contract.abi.json';\r\nimport { NFT_CONTRACT_ADDRESS } from '../../constants/contract-address';\r\nimport { create } from '../../contracts/nft-contract';\r\n\r\nconst CreateNFT = () => {\r\n\r\n    const [uri, setUri] = useState('');\r\n    \r\n    const [token, setToken] = useState('0x022E292b44B5a146F2e8ee36Ff44D3dd863C915c');\r\n    const [amount, setAmount] = useState(100);\r\n    const [multiply, setMultiply] = useState(10000);\r\n    const [accrue, setAccrue] = useState(3000);\r\n    const [intervalSeconds, setIntervalSeconds] = useState(25200);\r\n    const [reduceCommission, setReduceCommission] = useState(1000);\r\n    const [tokenCreated, setTokenCreated] = useState(false);\r\n\r\n   /*\r\n    const [token, setToken] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n    const [multiply, setMultiply] = useState(0);\r\n    const [accrue, setAccrue] = useState(0);\r\n    const [intervalSeconds, setIntervalSeconds] = useState(0);\r\n    const [reduceCommission, setReduceCommission] = useState(0);\r\n    const [tokenCreated, setTokenCreated] = useState(false);\r\n*/\r\n\r\n    const [author, setAuthor] = useState('');\r\n    const [tokenId, setTokenId] = useState('');\r\n\r\n  \r\n    const createToken = async (event) => {\r\n        event.preventDefault();\r\n        console.log('contract address', NFT_CONTRACT_ADDRESS[4]);\r\n        console.log('create Token');\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(NFT_CONTRACT_ADDRESS[4], abi, signer);\r\n        const res = await create(NFT_CONTRACT_ADDRESS[4], signer, uri, \r\n            [\r\n                token,\r\n                amount,\r\n                multiply,\r\n                accrue,\r\n                intervalSeconds,\r\n                reduceCommission,\r\n            ]\r\n        );\r\n\r\n        console.log({res});\r\n\r\n        contract.on(\"TokenCreated\", async (author, tokenId) => {\r\n            setTokenCreated(true);\r\n            setAuthor(author);\r\n            const res = utils.formatUnits(tokenId, 0);\r\n            setTokenId(res);\r\n            console.log({ author, tokenId });\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ textAlign: 'left'}}>\r\n            <h3>Create NFT Token</h3>\r\n            <form onSubmit={createToken}>\r\n                <div>\r\n                    <p>Uri</p>\r\n                    <input type=\"text\" value={uri} onChange={(evt) => setUri(evt.target.value)} />\r\n                </div>\r\n                <h4>Commission Params:</h4>\r\n                <div style={{ paddingLeft: '20px', borderLeft: 'solid 1px lightgray'}}>\r\n                    <div>\r\n                        <p>Token</p>\r\n                        <input type=\"text\" value={token} onChange={(evt) => setToken(evt.target.value)} />\r\n                    </div>\r\n                    <div>\r\n                        <p>Amount</p>\r\n                        <input type=\"text\" value={amount} onChange={(evt) => setAmount(evt.target.value)} />\r\n                    </div>\r\n                    <div>\r\n                        <p>Multiply</p>\r\n                        <input type=\"text\" value={multiply} onChange={(evt) => setMultiply(evt.target.value)} />\r\n                    </div>\r\n                    <div>\r\n                        <p>Accrue</p>\r\n                        <input type=\"text\" value={accrue} onChange={(evt) => setAccrue(evt.target.value)} />\r\n                    </div>\r\n                    <div>\r\n                        <p>IntervalSeconds</p>\r\n                        <input type=\"text\" value={intervalSeconds} onChange={(evt) => setIntervalSeconds(evt.target.value)} />\r\n                    </div>\r\n                    <div>\r\n                        <p>ReduceCommission</p>\r\n                        <input type=\"text\" value={reduceCommission} onChange={(evt) => setReduceCommission(evt.target.value)} />\r\n                    </div>\r\n                </div>\r\n                \r\n                <div style={{ paddingTop: '16px' }}>\r\n                    <input type=\"submit\" value=\"Create Token\" />\r\n                </div>\r\n                \r\n            </form>\r\n            { tokenCreated && \r\n                <p>\r\n                    {author} created new token with tokenId: {tokenId}\r\n                </p>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateNFT;\r\n","import { useEffect, useState } from 'react';\r\nimport { ethers, utils } from 'ethers';\r\nimport { abi } from '../../contracts/nft-contract.abi.json';\r\nimport { NFT_CONTRACT_ADDRESS } from '../../constants/contract-address';\r\nimport { getCommission } from '../../contracts/nft-contract';\r\n\r\nconst GetCommission = () => {\r\n\r\n    const [tokenId, setTokenId] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [amount, setAmount] = useState('');\r\n    const [status, setStatus] = useState(false);\r\n  \r\n    const getData = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const res = await getCommission(NFT_CONTRACT_ADDRESS[4], signer, tokenId);\r\n            if (res[0]) {\r\n                setStatus(true);\r\n                setAmount(utils.formatUnits(res[1], 0));\r\n                setAddress(res[0]);\r\n                console.log({res});\r\n            }\r\n        } catch (e) {\r\n            setStatus(false);\r\n            console.log(e);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ textAlign: 'left'}}>\r\n            <h3>Get Commission</h3>\r\n            <form onSubmit={getData}>\r\n                <div>\r\n                    <p>Token ID</p>\r\n                    <input type=\"text\" value={tokenId} onChange={(evt) => setTokenId(evt.target.value)} />\r\n                </div>\r\n                <div style={{ paddingTop: '16px' }}>\r\n                    <input type=\"submit\" value=\"Get\" />\r\n                </div>\r\n                { status && \r\n                    <div>\r\n                        <p>Commission Token: {address}</p>\r\n                        <p>Commission Amount: {amount}</p>\r\n                    </div>\r\n                }\r\n                \r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GetCommission;\r\n","import { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { abi } from '../../contracts/nft-contract.abi.json';\r\nimport { NFT_CONTRACT_ADDRESS } from '../../constants/contract-address';\r\nimport { reduceCommission } from '../../contracts/nft-contract';\r\n\r\nconst ReduceCommission = () => {\r\n\r\n    const [tokenId, setTokenId] = useState('');\r\n    const [reduceCommissionPercent, setReduceCommissionPercent] = useState(0);\r\n  \r\n    const submitData = async (event) => {\r\n        event.preventDefault();\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const res = await reduceCommission(NFT_CONTRACT_ADDRESS[4], signer, tokenId, reduceCommissionPercent);\r\n        console.log({res});\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ textAlign: 'left'}}>\r\n            <h3>Reduce Commission</h3>\r\n            <form onSubmit={submitData}>\r\n                <div>\r\n                    <p>Token ID</p>\r\n                    <input type=\"text\" value={tokenId} onChange={(evt) => setTokenId(evt.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <p>Reduce Commissoin Percent [0 - 10000]</p>\r\n                    <input type=\"text\" value={reduceCommissionPercent} onChange={(evt) => setReduceCommissionPercent(evt.target.value)} />\r\n                </div>\r\n                <div style={{ paddingTop: '16px' }}>\r\n                    <input type=\"submit\" value=\"Set\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReduceCommission;\r\n","import { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { NFT_CONTRACT_ADDRESS } from '../../constants/contract-address';\r\nimport { claimLostToken } from '../../contracts/nft-contract';\r\n\r\nconst ClaimLostToken = () => {\r\n\r\n    const [address, setAddress] = useState('');\r\n  \r\n    const submitData = async (event) => {\r\n        event.preventDefault();\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const res = await claimLostToken(NFT_CONTRACT_ADDRESS[4], signer, address);\r\n        console.log({res});\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ textAlign: 'left'}}>\r\n            <h3>Claim Lost Token</h3>\r\n            <form onSubmit={submitData}>\r\n                <div>\r\n                    <p>ERC20 Address</p>\r\n                    <input type=\"text\" value={address} onChange={(evt) => setAddress(evt.target.value)} />\r\n                </div>\r\n                <div style={{ paddingTop: '16px' }}>\r\n                    <input type=\"submit\" value=\"Claim\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClaimLostToken;\r\n","import { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport abi from '../../contracts/nft-contract.abi.json';\r\nimport { NFT_CONTRACT_ADDRESS } from '../../constants/contract-address';\r\nimport { listForSale } from '../../contracts/nft-contract';\r\n\r\nconst ListForSale = () => {\r\n\r\n    const [tokenId, setTokenId] = useState(0);\r\n    const [amount, setAmount] = useState(0);\r\n    const [consumeToken, setConsumeToken] = useState('0x0000000000000000000000000000000000000000');\r\n  \r\n    const submitData = async (event) => {\r\n        event.preventDefault();\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(NFT_CONTRACT_ADDRESS[4], abi, signer);\r\n        const res = await listForSale(NFT_CONTRACT_ADDRESS[4], signer, tokenId, amount, consumeToken);\r\n        console.log({res});\r\n        // setCommission(res.toString());\r\n        // TokenAddedToSale\r\n        contract.on(\"TokenAddedToSale\", async (tokenId, amount, consumeToken) => {\r\n            console.log('Token is added to sale', { tokenId, amount, consumeToken});\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ textAlign: 'left'}}>\r\n            <h3>List For Sale</h3>\r\n            <form onSubmit={submitData}>\r\n                <div>\r\n                    <p>Token ID</p>\r\n                    <input type=\"text\" value={tokenId} onChange={(evt) => setTokenId(evt.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <p>Amount (eth)</p>\r\n                    <input type=\"text\" value={amount} onChange={(evt) => setAmount(evt.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <p>Consume Token (address(0) for coin)</p>\r\n                    <input type=\"text\" value={consumeToken} onChange={(evt) => setConsumeToken(evt.target.value)} />\r\n                </div>\r\n                <div style={{ paddingTop: '16px' }}>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListForSale;\r\n","import { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { abi } from '../../contracts/nft-contract.abi.json';\r\nimport { NFT_CONTRACT_ADDRESS } from '../../constants/contract-address';\r\nimport { removeFromSale } from '../../contracts/nft-contract';\r\n\r\nconst RemoveFromSale = () => {\r\n\r\n    const [tokenId, setTokenId] = useState(0);\r\n  \r\n    const submitData = async (event) => {\r\n        event.preventDefault();\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const res = await removeFromSale(NFT_CONTRACT_ADDRESS[4], signer, tokenId);\r\n        console.log({res});\r\n        // setCommission(res.toString());\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ textAlign: 'left'}}>\r\n            <h3>Remove From Sale</h3>\r\n            <form onSubmit={submitData}>\r\n                <div>\r\n                    <p>Token ID</p>\r\n                    <input type=\"text\" value={tokenId} onChange={(evt) => setTokenId(evt.target.value)} />\r\n                </div>\r\n                <div style={{ paddingTop: '16px' }}>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RemoveFromSale;\r\n","import { ethers, utils } from \"ethers\";\nimport BigNumber from \"bignumber.js\";\nimport abi from './erc20.abi.json';\n// import { isTransactionMined } from \"../lib/helper\";\n\nexport async function getBalance(coinAddress, address, signer) {\n  try {\n    const erc20 = new ethers.Contract(coinAddress, abi, signer);\n    const balance = await erc20.balanceOf(address);\n    return balance.toString();    \n  } catch (e) {\n    return \"0\";\n  }\n}\n\nexport async function getTotalSupply(coinAddress, signer) {\n  try {\n    const erc20 = new ethers.Contract(coinAddress, abi, signer);\n    const total = await erc20.totalSupply();\n    return total.toString();\n\n  } catch (e) {\n    return \"0\";\n  }\n}\n\nexport async function isTokenApproved(coinAddress, owner, contract, amount, signer) {\n  try {\n    const erc20 = new ethers.Contract(coinAddress, abi, signer);\n    const allowance = (await erc20.allowance(owner, contract)) || 0;\n    const x = new BigNumber(allowance);\n    const y = new BigNumber(amount);\n    return x.isGreaterThanOrEqualTo(y.isEqualTo(\"0\") ? \"10000000\":y);\n  } catch (e) {\n    return 0;\n  }\n}\n\nexport async function approveToken(coinAddress, signer, contract, amount) {\n    const erc20 = new ethers.Contract(coinAddress, abi, signer);\n    const { hash } = await erc20.approve(contract, utils.parseEther(amount));\n    /*\n    try {\n      while (true) {\n        let mined = await isTransactionMined(hash);\n        if (mined) break;\n      }\n    } catch (e) {\n      console.error(e);\n      return \"\";\n    }\n    */\n    return hash;\n}","import { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { abi } from '../../contracts/nft-contract.abi.json';\r\nimport { NFT_CONTRACT_ADDRESS } from '../../constants/contract-address';\r\nimport { buyWithCoins, buyWithTokens, saleInfo } from '../../contracts/nft-contract';\r\nimport { approveToken } from '../../contracts/erc20';\r\n\r\nconst Buy = () => {\r\n\r\n    const [tokenId, setTokenId] = useState(0);\r\n\r\n    const COMMISSION_TOKEN_ADDRESS = \"0x022E292b44B5a146F2e8ee36Ff44D3dd863C915c\";\r\n  \r\n    const buyWithCoin = async (event) => {\r\n        event.preventDefault();\r\n        console.log('buy with coin', tokenId);\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const res = await buyWithCoins(NFT_CONTRACT_ADDRESS[4], signer, tokenId);\r\n        console.log({res});\r\n    }\r\n\r\n    const buyWithToken = async (event) => {\r\n        event.preventDefault();\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const info = await saleInfo(NFT_CONTRACT_ADDRESS[4], signer, tokenId);\r\n        console.log({info});\r\n        \r\n        await approveToken(info[0], signer, NFT_CONTRACT_ADDRESS[4], '1000');\r\n        const res = await buyWithTokens(NFT_CONTRACT_ADDRESS[4], signer, tokenId);\r\n        console.log({res});\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ textAlign: 'left'}}>\r\n            <h3>Buy Token</h3>\r\n            <div>\r\n                <p>Token ID</p>\r\n                <input type=\"text\" value={tokenId} onChange={(evt) => setTokenId(evt.target.value)} />\r\n            </div>\r\n            <div style={{ paddingTop: '16px' }}>\r\n                <button onClick={buyWithCoin}> Buy With Coins</button>\r\n                <button onClick={buyWithToken}> Buy With Tokens</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Buy;\r\n","import { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { abi } from '../../contracts/nft-contract.abi.json';\r\nimport { NFT_CONTRACT_ADDRESS } from '../../constants/contract-address';\r\nimport { offerToPayCommission, getCommission } from '../../contracts/nft-contract';\r\nimport { approveToken } from '../../contracts/erc20';\r\n\r\nconst OfferToPayCommission = () => {\r\n\r\n    const [tokenId, setTokenId] = useState(0);\r\n    const [amount, setAmount] = useState(0);\r\n    \r\n    const COMMISSION_TOKEN_ADDRESS = \"0x022E292b44B5a146F2e8ee36Ff44D3dd863C915c\";\r\n\r\n    const submitData = async (event) => {\r\n        event.preventDefault();\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const res = await getCommission(NFT_CONTRACT_ADDRESS[4], signer, tokenId);\r\n\r\n        await approveToken(res[0], signer, NFT_CONTRACT_ADDRESS[4], '1000');\r\n        await offerToPayCommission(NFT_CONTRACT_ADDRESS[4], signer, tokenId, amount);\r\n        // setCommission(res.toString());\r\n    }\r\n\r\n    return (\r\n        <div style={{ textAlign: 'left'}}>\r\n            <h3>Offer To Pay Commission</h3>\r\n            <form onSubmit={submitData}>\r\n                <div>\r\n                    <p>Token ID</p>\r\n                    <input type=\"text\" value={tokenId} onChange={(evt) => setTokenId(evt.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <p>Amount</p>\r\n                    <input type=\"text\" value={amount} onChange={(evt) => setAmount(evt.target.value)} />\r\n                </div>\r\n                <div style={{ paddingTop: '16px' }}>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OfferToPayCommission;\r\n","import { useEffect, useState } from 'react';\r\nimport { ethers, utils } from 'ethers';\r\nimport { abi } from '../../contracts/nft-contract.abi.json';\r\nimport { NFT_CONTRACT_ADDRESS } from '../../constants/contract-address';\r\nimport { tokensByAuthor } from '../../contracts/nft-contract';\r\n\r\nconst TokensByAuthor = () => {\r\n\r\n    const [author, setAuthor] = useState('');\r\n    const [tokens, setTokens] = useState([]);\r\n  \r\n    const submitData = async (event) => {\r\n        event.preventDefault();\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const res = await tokensByAuthor(NFT_CONTRACT_ADDRESS[4], signer, author);\r\n        setTokens(res);\r\n        console.log({res});\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ textAlign: 'left'}}>\r\n            <h3>Tokens By Author</h3>\r\n            <form onSubmit={submitData}>\r\n                <div>\r\n                    <p>Author</p>\r\n                    <input type=\"text\" value={author} onChange={(evt) => setAuthor(evt.target.value)} />\r\n                </div>\r\n                <div style={{ paddingTop: '16px' }}>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </div>\r\n                {\r\n                    tokens.forEach(element => {\r\n                      return <span>{utils.formatUnits(element, 0)}</span>  \r\n                    })\r\n                }\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TokensByAuthor;\r\n","import { useWallet } from 'use-wallet';\r\n\r\nimport DeployNFTContract from '../../components/deploy-contract';\r\nimport CreateNFT from '../../components/create-token';\r\nimport GetCommission from '../../components/get-commission';\r\nimport ReduceCommission from '../../components/reduce-commission';\r\nimport ClaimLostToken from '../../components/claim-lost-token';\r\nimport ListForSale from '../../components/list-for-sale';\r\nimport RemoveFromSale from '../../components/remove-from-sale';\r\nimport Buy from '../../components/buy';\r\nimport OfferToPayCommission from '../../components/offer-pay-commission';\r\nimport TokensByAuthor from '../../components/tokens-by-author';\r\n\r\nconst Home = () => {\r\n\r\n  const wallet = useWallet()\r\n  \r\n  const connectWallet = () => {\r\n    \r\n    if (wallet.status !== 'connected') {\r\n        console.log('Connecting Wallet');\r\n        wallet.connect();\r\n    } else {\r\n        console.log('Wallet is already connected');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: '20px 40px' }}>\r\n      <h2>Non Fungible Contract</h2>\r\n      <button onClick={connectWallet}>Connect Wallet</button>\r\n      <div style={{display: 'flex', marginTop: '30px'}}>\r\n        <div style={{flex: '1'}}>\r\n          <DeployNFTContract></DeployNFTContract>\r\n          <GetCommission></GetCommission>\r\n          <ReduceCommission></ReduceCommission>\r\n          <RemoveFromSale></RemoveFromSale>\r\n          <OfferToPayCommission></OfferToPayCommission>\r\n          <ClaimLostToken></ClaimLostToken>\r\n        </div>\r\n        <div style={{flex: '1'}}>\r\n          <CreateNFT></CreateNFT>\r\n          <ListForSale></ListForSale>\r\n          <Buy></Buy>\r\n          <TokensByAuthor></TokensByAuthor>\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import './App.css';\nimport { UseWalletProvider } from 'use-wallet'\nimport Home from \"./pages/home\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\n// export default App;\nexport default () => (\n  <UseWalletProvider\n    chainId={4}\n    connectors={{\n      // This is how connectors get configured\n    }}\n  >\n    <App />\n  </UseWalletProvider>\n);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}